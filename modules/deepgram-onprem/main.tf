

# Terraform module for the Deepgram On-Prem service.
# This consists of the following:
# - Managed Instance Group (sets scaling parameters)
# - Instance Template (sets machine type, image, etc.)
# - Image (contains the Deepgram On-Prem software)
# - Backend Service (for load balancing)
# - Global load balancer (URL map)
# - 


# - Health Check (for load balancing)
# - URL Map (for load balancing)
# - Target HTTP Proxy (for load balancing)
# - Target HTTPS Proxy (for load balancing)
# - Global Forwarding Rule (for load balancing)
# - Global Forwarding Rule (for load balancing)
# - SSL Certificate (for load balancing)


# Below are some of the generated resources that I think we need.

resource "google_compute_managed_ssl_certificate" "tfer--dgonprem-lb-cert" {
  certificate_id = "574026883373852640"

  managed {
    domains = ["dgonprem.fixie.ai", "t4.dgonprem.fixie.ai", "v100.dgonprem.fixie.ai"]
  }

  name    = "dgonprem-lb-cert"
  project = "fixie-frame"
  type    = "MANAGED"
}

resource "google_compute_global_address" "tfer--dgonprem-lb-frontend-ip" {
  address       = "34.36.242.185"
  address_type  = "EXTERNAL"
  ip_version    = "IPV4"
  name          = "dgonprem-lb-frontend-ip"
  prefix_length = "0"
  project       = "fixie-frame"
}

resource "google_compute_global_forwarding_rule" "tfer--dgonprem-frontend-lb" {
  ip_address            = "34.36.242.185"
  ip_protocol           = "TCP"
  load_balancing_scheme = "EXTERNAL_MANAGED"
  name                  = "dgonprem-frontend-lb"
  port_range            = "443-443"
  project               = "fixie-frame"
  target                = "https://www.googleapis.com/compute/v1/projects/fixie-frame/global/targetHttpsProxies/dgonprem-lb-target-proxy"
}



# Below is generated by Copilot and is probably not right, but maybe useful for reference.

module "managed_instance_group" {
    source  = "terraform-google-modules/managed-instance-group/google"
    version = "3.0.0"

    project_id      = var.project_id
    region          = var.region
    zone            = var.zone
    name            = var.name
    instance_count  = var.instance_count
    machine_type    = var.machine_type
    boot_disk_image = var.boot_disk_image
    network_tags    = var.network_tags
    service_account = var.service_account
    subnetwork      = var.subnetwork
    target_pools    = var.target_pools
    metadata        = var.metadata
    labels          = var.labels
}

resource "google_compute_image" "boot_disk_image" {
    name               = var.boot_disk_image
    project            = var.project_id
    family             = "debian-10"
    source_image       = "debian-cloud/debian-10"
    storage_locations  = ["us-central1"]
}

resource "google_compute_instance" "vm_instance" {
    name         = "my-vm-instance"
    machine_type = "n1-standard-1"
    zone         = "us-central1-a"

    boot_disk {
        initialize_params {
            image = google_compute_image.boot_disk_image.self_link
        }
    }

    metadata_startup_script = <<-EOF
        #!/bin/bash
        echo "Running startup script..."
        # Run your desired commands here
        echo "Command 1"
        echo "Command 2"
        echo "Command 3"
        EOF
}


resource "google_compute_backend_service" "backend_service" {
    name        = "my-backend-service"
    project     = var.project_id
    description = "Backend service for load balancer"

    backend {
        group = module.managed_instance_group.instance_group_self_link
    }

    health_checks = [
        google_compute_health_check.health_check.self_link
    ]
}

resource "google_compute_health_check" "health_check" {
    name               = "my-health-check"
    project            = var.project_id
    check_interval_sec = 5
    timeout_sec        = 5
    tcp_health_check {
        port = 80
    }
}

resource "google_compute_http_health_check" "http_health_check" {
    name               = "my-http-health-check"
    project            = var.project_id
    check_interval_sec = 5
    timeout_sec        = 5
    request_path       = "/"
    port               = 80
}

resource "google_compute_https_health_check" "https_health_check" {
    name               = "my-https-health-check"
    project            = var.project_id
    check_interval_sec = 5
    timeout_sec        = 5
    request_path       = "/"
    port               = 443
}

resource "google_compute_url_map" "url_map" {
    name        = "my-url-map"
    project     = var.project_id
    description = "URL map for load balancer"

    default_service = google_compute_backend_service.backend_service.self_link
}

resource "google_compute_target_http_proxy" "http_proxy" {
    name        = "my-http-proxy"
    project     = var.project_id
    url_map     = google_compute_url_map.url_map.self_link
}

resource "google_compute_target_https_proxy" "https_proxy" {
    name        = "my-https-proxy"
    project     = var.project_id
    url_map     = google_compute_url_map.url_map.self_link
    ssl_certificates = [
        google_compute_ssl_certificate.ssl_certificate.self_link
    ]
}

resource "google_compute_global_forwarding_rule" "forwarding_rule" {
    name        = "my-forwarding-rule"
    project     = var.project_id
    target      = google_compute_target_http_proxy.http_proxy.self_link
    port_range  = "80"
}

resource "google_compute_global_forwarding_rule" "https_forwarding_rule" {
    name        = "my-https-forwarding-rule"
    project     = var.project_id
    target      = google_compute_target_https_proxy.https_proxy.self_link
    port_range  = "443"
}

resource "google_compute_ssl_certificate" "ssl_certificate" {
    name        = "my-ssl-certificate"
    project     = var.project_id
    private_key = file("path/to/private/key")
    certificate = file("path/to/certificate")
}
